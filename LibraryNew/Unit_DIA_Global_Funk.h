//---------------------------------------------------------------------------
#ifndef Unit_DIA_Global_FunkH
#define Unit_DIA_Global_FunkH
//---------------------------------------------------------------------------
#include <jpeg.hpp>	// Pascal unit
#include <System.hpp>	// Pascal unit

typedef struct find_t__
{
  char * StrLek; // Строка лексемм
  char * StrText; // Строка текста
  int iFirst; // Первый символ в строке find.StrText
  int iLast; // Последний символ в строке find.StrText
  int N;
  char chKontrol[16];
  bool AllCount; // true - Считать все найденные последовательности
  int Count; // Количество найденных последовательностей при AllCount = true
  bool RazLek; // true - использовать разделитель лексем chR в строке StrLek
  char chR; // Символ разделителя
  int pereskok; // Длина лексемы минус 1, т.е. велечина "перескока"
  bool bOtdelLeft; // true - лексема отделена началом строки либо символом слева
  bool bOtdelRight; // true - лексема отделена концом строки строки либо символом справа
} find_t, * p_find_t;

typedef struct godnost_t__
{
  enum { MaxIP = 25, MaxStr = 255 };
  typedef enum { pr_NetPrichin,
                 pr_SlashTwo,
                 pr_KomOtkr,
                 pr_Reshotka,
                 pr_Kavychki,
                 pr_Appostr
  } Prichina_t;
  Prichina_t Prichina;
  int PrichinaArr[MaxIP];
  int Net[MaxIP]; // С этого места начинается непригодные для обработки символы
  int Yes[MaxIP]; // С этого места начинаются пригодные для обработки символы
  int SkobkaNet[MaxIP]; // С этого места начинается непригодные для обработки символы ";"
  int SkobkaYes[MaxIP]; // С этого места начинаются пригодные для обработки символы ";"
  int Count; // Считает зоны пригодности
  int CountSkoba;
  int SkobaOtkr; // "("
  int SkobaZakr; // ")"
  int Kavychki; // количество кавычек "
  int Appostr; // количество апострофов '
  int SlashTwo; // "//"  (прямые слеши)
  int KomOtkr; // "/*"
  int KomZakr; // "*/"
  int Reshotka; // "#"
  char * chOriginal;
  char * chConvert;
  char chArrConvert[MaxStr];
  int Obmen[MaxIP]; // Обмениваться данными
} godnost_t, * p_godnost_t;

typedef struct StrParam_t__
{
  typedef enum { Net, ToSmall, ToBig } zamenaBukv_t;
  zamenaBukv_t Zamena;
  // Параметры копирования
  // void DiaStrCpy( p_StrParam_t )
  enum { MaxLen = 255 };
  bool bNullEnd; // Завершить строку символом '\0', если bNullEnd = true
  bool bFindLeftRightStr; // Если bFindLeftRightStr = true, искать в строке
  // chSrc подстроки chLeft и chRight и копировать текст, содержащийся между
  // ними (если такой имеется) т.е. правее chLeft и левее chRight
  char * chSrc; // Строка из которой копируется текст
  char * chDest; // Строка в которую копируется текст
  // Два следующие ниже параметра используются при bFindLeftRightStr = false
  int iSrcFirst; // Позиция, из которой скопируется первый символ
  int iKolSimv; // Количество символов, которое будет скопировано
  //==\\// Следующий ниже параметр используются при bFindLeftRightStr = true
  //==\\int iDopKolSimv; // Дополнительно скопированные символы
  int iDestFirst; // Позиция, в которую скопируется первый символ

  //
  char * chRight; // Подстрока, находящаяся справа от копируемой подстроки
  char * chLeft; // Подстрока, находящаяся слева от копируемой строки
  bool bRevers; // Направление поиска реверсивное (с конца строки к началу), при iRevers = true
  bool bRezult; // Результат выполнения true - успех, false - неудача
  // Параметры поиска и замены
  // void DiaFindReplace( p_StrParam_t )
  //==\\char * chSrc; // Строка в которой ищется исходный текст chLeft, и заменяется на chRight
  //==\\char * chLeft; // Подстрока, содержащая исходный текст
  //==\\char * chRight; // Подстрока, содержащая текст замены
} StrParam_t, * p_StrParam_t;



extern find_t find;
extern godnost_t godnost1;
extern godnost_t godnost2;
extern godnost_t godnost3;
extern godnost_t gst;
extern godnost_t gst_Sdvig;
extern StrParam_t StrParam1;

//--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->---
// Возвращает НУЛЬ, в случеа удачного завершения работы
// или символ, при обработке которого произшла ошибка (начиная с единицы)
int dia_atof( float * fVar, char * chStr );
//---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---

//--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->---
// Возвращает НУЛЬ, в случеа удачного завершения работы
// или символ, при обработке которого произшла ошибка (начиная с единицы)
int dia_atoi( int * iVar, char * chStr );
//---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---

//--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->---
// Ищет символ chSim в строке chStr, начиная с индекса iFirst,
// заканчивая индексом iLast.
// Возвращает: -1 - не нашел, иначе индекс найденного символа в массиве
// chStr (начиная от 0)
int FindSimInStr( char chSim, char * chStr, int iFirst = 0, int iLast = -1 );
//---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---

//--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->---
// Ищет маленькую строку chStrSmall в строке большой chStrBig,
// начиная с индекса iFirst, заканчивая индексом iLast
// возвращает: -1 - не нашел, иначе индекс в массиве chStrBig
int FindSmallInBig( char * chStrSmall, char * chStrBig, int iFirst = 0, int iLast = -1 );
//---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---

//--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->---
// Строка chStrMulti состоиз из множество подстрок символов, длинной N каждая
// например строку "if==()" можно представить как совокупность подстрок
// ("if", "==", "()") с длинной N = 2 и номерами 0, 1 и 2 соответственно.
// Ищет одну из подстрок, длиной N (входящих chStrMulti) в строке chStrBig,
// начиная с индекса iFirst, заканчивая индексом iLast (от 0 до Длина-1)
// возвращает: -1 - не нашел, иначе номер подстроки (от 0 до ЦЧ(Длина-1)/N)
// где ЦЧ - целая часть от деления.
int FindMultiInBig( find_t * find );
//---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---

//--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->---
int GetLengthStr( char * chStr ); // Возвращает длину, без нуль-символа
//---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---

//--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->---
// Сравнивает первые N символов двух строк, если строки совпадают в первых
// N символах - возвращается 0, если -1 - строки не совпадают, если -2
// - длина одной из строк меньше N, если -3 - ошибка при вводе N
int CmpNFirst( char * chStr1, char * chStr2, int N );
//---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---

//--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->---
// Копирует часть строки (от iFirst до iLast) chStrFrom в строку chStrTo
// iFirst - индекс первого копируемого символа
// iLast - индекс последнего копируемого символа
// Если iFirst = iLast = 0, то копируется вся строка
// Возвращает длину строки chStrTo, без учёта завершающего нуля
int diaStrCpy( char * chStrTo, char * chStrFrom, int iFirst = 0, int iLast = -1 );
//---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---

//--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->---
float diaBaseExp( int iPor ); // = 10^iPor
TGraphic * LoadJPEGFromResource( THandle resHandle, String name );
AnsiString Preobraz( AnsiString prov );
//---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---

//--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->---
// Преобразует строку chFrom, сохраняя результат в строке chTo
// Убирает всё пробельные символы в начале строки;
// Убирает в строке более одного пробельного символа подряд;
// Вставляет пробел перед символами и лексемами:
//        ')'; '='; ">"; "<"; '+'; '-'; '*'; '/'; '%'; "//"; "=="; "!="; ">=";
//        "<="; "+="; "-="; "*="; "/="; "%="; "||"; "&&"; "<<"; ">>"
// Вставляет пробел после символов и лексем:
//        '('; ','; '='; ">"; "<"; '+'; '-'; '*'; '/'; '%'; "if"; "for";
//        "while"; "//"; "=="; "!="; ">="; "<="; "+="; "-="; "*=";
//        "/="; "%="; "||"; "&&"; "<<"; ">>"; "++"; "--"
// В переменной типа "godnost_t" сохраняет данные, для дальнейшей обработки
// другими функциями, например "Prigodnost()"
void SpaceCPPConvert( godnost_t * godnost_var );
//---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---

//--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->---
// Преобразует строку chFrom, сохраняя результат в строке chTo
// Перед исходной строкой ставит строкой iSp пробелов
void SpaceInsert( char * chTo, char * chFrom, int iSp = 0 ); // chTo := chFrom
//---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---

//--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->---
// Вставляет символ chSim в строку chTo по индексу Index
int SimvolInsert( char * chTo, int Index, char chSim, godnost_t * godnost_var );
int SimvolInsert( char * chTo, int Index, char chSim );
//---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---

//--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->---
// Сдвигает строку chStr на iSdvig символов левее
int StrSdvig( char * chStr, int iSdvig, godnost_t * godnost_var );
//---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---

//--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->---
// Удаляет пробельные символы слева
// Возвращает количество удалённых пробелов
int StrDelSpace( char * chStr );
//---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---

//--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->---
// Контроль и коррекция входных параметров (аргументов)
int KorekArg( char * chStr, int iFirst, int * iLast );
//---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---

//--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->---
// Обнуляет поля структур skobkiCount и kavCount;
void Obnulenie( godnost_t * godnost_var );
//---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---

//--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->---
// Пригодность символа либо многосимвольной лексемы для дальнейшей обработки
// true - пригодна, false - нет
//     - Проверить стоит ли символ внутри кавичек "Символ";
//     - Проверить стоит ли символ внутри комментария /*Символ*/;
//     - Проверить стоит ли символ после коментария //;
//     - Проверить стоит ли символ после #.
bool Prigodnost( godnost_t * godnost_var );
//bool Prigodnost( int N ); // N - символ в строке
bool Proverka( int N, godnost_t * godnost_var ); // Проверка пригодности
//---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---

//--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->---
// То же самое, что и "FindSmallInBig()", но с проверкой, на пригодность
// т.е. лексемы, удовлетворяющие этой функции, например не должны быть
// /* ВНУТРИ КОММЕНТАРИЯ */
int FindSmallInBigPrigod( char * chLeksem,
                          char * chStrBig,
                          godnost_t * godnost_var,
                          int iSumIndex,
                          int iFirst = 0,
                          int iLast = -1 );
//---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---

//--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->---
void GodRes( godnost_t * godnost_var );
//---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---

//--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->---
// Учет символа
// true - учитывать символ ";", false - не учитывать его т.к. он внутри
// "("скобок")"
bool Uchet( godnost_t * godnost_var );
//---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---

//--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->---
bool Proverka2( int N, godnost_t * godnost_var ); // Проверка пригодности 2
//---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---

//--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->---
// Найти первый НЕ ПРОБЕЛЬНЫЙ символ доступный для обработки, начиная с
// индекса iFirst
bool FindPrigod( int iFirst, godnost_t * godnost_var );
//---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---

//--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->---
// Если строку сдвинули на iSdvig символов влево, надо учесть это
// в структуре данных, типа godnost_t
void Korrektor( int iSdvig, godnost_t * godnost_var );
//---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---

//--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->---
// Если в позицию Pos вставляются N символов, это надо учесть.
bool Korrektor2( int iPos, int N, godnost_t * godnost_var );
//---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---

//--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->---
// Функция копирования строк
void DiaStrCpy( p_StrParam_t p_StrParam_Var );
//---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---

//--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->---
// Функция замены строк
void DiaFindReplace( p_StrParam_t p_StrParam_Var );
//---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---

//--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->---
// Переводит русские и английские буквы в "БОЛЬШИЕ"
char ToBigBukva( char Bukva );
//---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---

//--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->---
// Переводит русские и английские буквы в "маленькие"
char ToSmallBukva( char Bukva );
//---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---

//--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->---
bool DiaCreateDir( AnsiString asDirName );
//---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---

//--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->--->---
AnsiString DiaDiskBukba( void );
//---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---<---

#endif
